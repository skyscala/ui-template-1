Ly8gS2FybWEgY29uZmlndXJhdGlvbiBmaWxlLCBzZWUgbGluayBmb3IgbW9yZSBpbmZvcm1hdGlvbgovLyBodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8vMS4wL2NvbmZpZy9jb25maWd1cmF0aW9uLWZpbGUuaHRtbAoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICBjb25maWcuc2V0KHsKICAgICAgICBiYXNlUGF0aDogJycsCiAgICAgICAgZnJhbWV3b3JrczogWydqYXNtaW5lJywgJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyJ10sCiAgICAgICAgcGx1Z2luczogWwogICAgICAgICAgICByZXF1aXJlKCdrYXJtYS1qYXNtaW5lJyksCiAgICAgICAgICAgIHJlcXVpcmUoJ2thcm1hLWNocm9tZS1sYXVuY2hlcicpLAogICAgICAgICAgICByZXF1aXJlKCdrYXJtYS1qYXNtaW5lLWh0bWwtcmVwb3J0ZXInKSwKICAgICAgICAgICAgcmVxdWlyZSgna2FybWEtY292ZXJhZ2UtaXN0YW5idWwtcmVwb3J0ZXInKSwKICAgICAgICAgICAgcmVxdWlyZSgnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXIvcGx1Z2lucy9rYXJtYScpCiAgICAgICAgXSwKICAgICAgICBjbGllbnQ6IHsKICAgICAgICAgICAgY2xlYXJDb250ZXh0OiBmYWxzZSAvLyBsZWF2ZSBKYXNtaW5lIFNwZWMgUnVubmVyIG91dHB1dCB2aXNpYmxlIGluIGJyb3dzZXIKICAgICAgICB9LAogICAgICAgIGNvdmVyYWdlSXN0YW5idWxSZXBvcnRlcjogewogICAgICAgICAgICBkaXI6IHJlcXVpcmUoJ3BhdGgnKS5qb2luKF9fZGlybmFtZSwgJy4vY292ZXJhZ2UvY2FsaWZvcm5pYS1uZycpLAogICAgICAgICAgICByZXBvcnRzOiBbJ2h0bWwnLCAnbGNvdm9ubHknLCAndGV4dC1zdW1tYXJ5J10sCiAgICAgICAgICAgIGZpeFdlYnBhY2tTb3VyY2VQYXRoczogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgcmVwb3J0ZXJzOiBbJ3Byb2dyZXNzJywgJ2tqaHRtbCddLAogICAgICAgIHBvcnQ6IDk4NzYsCiAgICAgICAgY29sb3JzOiB0cnVlLAogICAgICAgIGxvZ0xldmVsOiBjb25maWcuTE9HX0lORk8sCiAgICAgICAgYXV0b1dhdGNoOiB0cnVlLAogICAgICAgIGJyb3dzZXJzOiBbJ0Nocm9tZSddLAogICAgICAgIHNpbmdsZVJ1bjogZmFsc2UsCiAgICAgICAgcmVzdGFydE9uRmlsZUNoYW5nZTogdHJ1ZQogICAgfSk7Cn07Cg