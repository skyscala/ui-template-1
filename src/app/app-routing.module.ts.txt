aW1wb3J0IHtSb3V0ZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7CmltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQge0Rhc2hib2FyZERlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L2Rhc2hib2FyZGRlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtGb3JtTGF5b3V0RGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvZm9ybWxheW91dGRlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtQYW5lbHNEZW1vQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9wYW5lbHNkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7T3ZlcmxheXNEZW1vQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9vdmVybGF5c2RlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtNZWRpYURlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L21lZGlhZGVtby5jb21wb25lbnQnOwppbXBvcnQge01lbnVzRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvbWVudXNkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7TWVzc2FnZXNEZW1vQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9tZXNzYWdlc2RlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtNaXNjRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvbWlzY2RlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtFbXB0eURlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L2VtcHR5ZGVtby5jb21wb25lbnQnOwppbXBvcnQge0NoYXJ0c0RlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L2NoYXJ0c2RlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtGaWxlRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvZmlsZWRlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtEb2N1bWVudGF0aW9uQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9kb2N1bWVudGF0aW9uLmNvbXBvbmVudCc7CmltcG9ydCB7QXBwTWFpbkNvbXBvbmVudH0gZnJvbSAnLi9hcHAubWFpbi5jb21wb25lbnQnOwppbXBvcnQge0FwcE5vdGZvdW5kQ29tcG9uZW50fSBmcm9tICcuL3BhZ2VzL2FwcC5ub3Rmb3VuZC5jb21wb25lbnQnOwppbXBvcnQge0FwcEVycm9yQ29tcG9uZW50fSBmcm9tICcuL3BhZ2VzL2FwcC5lcnJvci5jb21wb25lbnQnOwppbXBvcnQge0FwcEFjY2Vzc2RlbmllZENvbXBvbmVudH0gZnJvbSAnLi9wYWdlcy9hcHAuYWNjZXNzZGVuaWVkLmNvbXBvbmVudCc7CmltcG9ydCB7QXBwTG9naW5Db21wb25lbnR9IGZyb20gJy4vcGFnZXMvYXBwLmxvZ2luLmNvbXBvbmVudCc7CmltcG9ydCB7SW5wdXREZW1vQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9pbnB1dGRlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtGbG9hdExhYmVsRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvZmxvYXRsYWJlbGRlbW8uY29tcG9uZW50JzsKaW1wb3J0IHtJbnZhbGlkU3RhdGVEZW1vQ29tcG9uZW50fSBmcm9tICcuL2RlbW8vdmlldy9pbnZhbGlkc3RhdGVkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7QnV0dG9uRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvYnV0dG9uZGVtby5jb21wb25lbnQnOwppbXBvcnQge1RhYmxlRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9kZW1vL3ZpZXcvdGFibGVkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7TGlzdERlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L2xpc3RkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7VHJlZURlbW9Db21wb25lbnR9IGZyb20gJy4vZGVtby92aWV3L3RyZWVkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7RGlzcGxheUNvbXBvbmVudH0gZnJvbSAnLi91dGlsaXRpZXMvZGlzcGxheS5jb21wb25lbnQnOwppbXBvcnQge0VsZXZhdGlvbkNvbXBvbmVudH0gZnJvbSAnLi91dGlsaXRpZXMvZWxldmF0aW9uLmNvbXBvbmVudCc7CmltcG9ydCB7RmxleGJveENvbXBvbmVudH0gZnJvbSAnLi91dGlsaXRpZXMvZmxleGJveC5jb21wb25lbnQnOwppbXBvcnQge0dyaWRDb21wb25lbnR9IGZyb20gJy4vdXRpbGl0aWVzL2dyaWQuY29tcG9uZW50JzsKaW1wb3J0IHtJY29uc0NvbXBvbmVudH0gZnJvbSAnLi91dGlsaXRpZXMvaWNvbnMuY29tcG9uZW50JzsKaW1wb3J0IHtXaWRnZXRzQ29tcG9uZW50fSBmcm9tICcuL3V0aWxpdGllcy93aWRnZXRzLmNvbXBvbmVudCc7CmltcG9ydCB7U3BhY2luZ0NvbXBvbmVudH0gZnJvbSAnLi91dGlsaXRpZXMvc3BhY2luZy5jb21wb25lbnQnOwppbXBvcnQge1R5cG9ncmFwaHlDb21wb25lbnR9IGZyb20gJy4vdXRpbGl0aWVzL3R5cG9ncmFwaHkuY29tcG9uZW50JzsKaW1wb3J0IHtUZXh0Q29tcG9uZW50fSBmcm9tICcuL3V0aWxpdGllcy90ZXh0LmNvbXBvbmVudCc7CmltcG9ydCB7QXBwQ3J1ZENvbXBvbmVudH0gZnJvbSAnLi9wYWdlcy9hcHAuY3J1ZC5jb21wb25lbnQnOwppbXBvcnQge0FwcENhbGVuZGFyQ29tcG9uZW50fSBmcm9tICcuL3BhZ2VzL2FwcC5jYWxlbmRhci5jb21wb25lbnQnOwppbXBvcnQge0FwcFRpbWVsaW5lRGVtb0NvbXBvbmVudH0gZnJvbSAnLi9wYWdlcy9hcHAudGltZWxpbmVkZW1vLmNvbXBvbmVudCc7CmltcG9ydCB7QXBwSW52b2ljZUNvbXBvbmVudH0gZnJvbSAnLi9wYWdlcy9hcHAuaW52b2ljZS5jb21wb25lbnQnOwppbXBvcnQge0FwcEhlbHBDb21wb25lbnR9IGZyb20gJy4vcGFnZXMvYXBwLmhlbHAuY29tcG9uZW50JzsKCkBOZ01vZHVsZSh7CiAgICBpbXBvcnRzOiBbCiAgICAgICAgUm91dGVyTW9kdWxlLmZvclJvb3QoWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwYXRoOiAnJywgY29tcG9uZW50OiBBcHBNYWluQ29tcG9uZW50LAogICAgICAgICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJycsIGNvbXBvbmVudDogRGFzaGJvYXJkRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9mb3JtbGF5b3V0JywgY29tcG9uZW50OiBGb3JtTGF5b3V0RGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9pbnB1dCcsIGNvbXBvbmVudDogSW5wdXREZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3Vpa2l0L2Zsb2F0bGFiZWwnLCBjb21wb25lbnQ6IEZsb2F0TGFiZWxEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3Vpa2l0L2ludmFsaWRzdGF0ZScsIGNvbXBvbmVudDogSW52YWxpZFN0YXRlRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9idXR0b24nLCBjb21wb25lbnQ6IEJ1dHRvbkRlbW9Db21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndWlraXQvdGFibGUnLCBjb21wb25lbnQ6IFRhYmxlRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9saXN0JywgY29tcG9uZW50OiBMaXN0RGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC90cmVlJywgY29tcG9uZW50OiBUcmVlRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9wYW5lbCcsIGNvbXBvbmVudDogUGFuZWxzRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9vdmVybGF5JywgY29tcG9uZW50OiBPdmVybGF5c0RlbW9Db21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndWlraXQvbWVudScsIGNvbXBvbmVudDogTWVudXNEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3Vpa2l0L21lZGlhJywgY29tcG9uZW50OiBNZWRpYURlbW9Db21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndWlraXQvbWVzc2FnZScsIGNvbXBvbmVudDogTWVzc2FnZXNEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3Vpa2l0L21pc2MnLCBjb21wb25lbnQ6IE1pc2NEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3Vpa2l0L2NoYXJ0cycsIGNvbXBvbmVudDogQ2hhcnRzRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1aWtpdC9maWxlJywgY29tcG9uZW50OiBGaWxlRGVtb0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvZGlzcGxheScsIGNvbXBvbmVudDogRGlzcGxheUNvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvZWxldmF0aW9uJywgY29tcG9uZW50OiBFbGV2YXRpb25Db21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndXRpbGl0aWVzL2ZsZXhib3gnLCBjb21wb25lbnQ6IEZsZXhib3hDb21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndXRpbGl0aWVzL2dyaWQnLCBjb21wb25lbnQ6IEdyaWRDb21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAndXRpbGl0aWVzL2ljb25zJywgY29tcG9uZW50OiBJY29uc0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvd2lkZ2V0cycsIGNvbXBvbmVudDogV2lkZ2V0c0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvc3BhY2luZycsIGNvbXBvbmVudDogU3BhY2luZ0NvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvdHlwb2dyYXBoeScsIGNvbXBvbmVudDogVHlwb2dyYXBoeUNvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICd1dGlsaXRpZXMvdGV4dCcsIGNvbXBvbmVudDogVGV4dENvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICdwYWdlcy9jcnVkJywgY29tcG9uZW50OiBBcHBDcnVkQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3BhZ2VzL2NhbGVuZGFyJywgY29tcG9uZW50OiBBcHBDYWxlbmRhckNvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICdwYWdlcy90aW1lbGluZScsIGNvbXBvbmVudDogQXBwVGltZWxpbmVEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ3BhZ2VzL2ludm9pY2UnLCBjb21wb25lbnQ6IEFwcEludm9pY2VDb21wb25lbnR9LAogICAgICAgICAgICAgICAgICAgIHtwYXRoOiAncGFnZXMvaGVscCcsIGNvbXBvbmVudDogQXBwSGVscENvbXBvbmVudH0sCiAgICAgICAgICAgICAgICAgICAge3BhdGg6ICdwYWdlcy9lbXB0eScsIGNvbXBvbmVudDogRW1wdHlEZW1vQ29tcG9uZW50fSwKICAgICAgICAgICAgICAgICAgICB7cGF0aDogJ2RvY3VtZW50YXRpb24nLCBjb21wb25lbnQ6IERvY3VtZW50YXRpb25Db21wb25lbnR9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHtwYXRoOiAnZXJyb3InLCBjb21wb25lbnQ6IEFwcEVycm9yQ29tcG9uZW50fSwKICAgICAgICAgICAge3BhdGg6ICdhY2Nlc3MnLCBjb21wb25lbnQ6IEFwcEFjY2Vzc2RlbmllZENvbXBvbmVudH0sCiAgICAgICAgICAgIHtwYXRoOiAnbm90Zm91bmQnLCBjb21wb25lbnQ6IEFwcE5vdGZvdW5kQ29tcG9uZW50fSwKICAgICAgICAgICAge3BhdGg6ICdsb2dpbicsIGNvbXBvbmVudDogQXBwTG9naW5Db21wb25lbnR9LAogICAgICAgICAgICB7cGF0aDogJyoqJywgcmVkaXJlY3RUbzogJy9ub3Rmb3VuZCd9LAogICAgICAgIF0sIHtzY3JvbGxQb3NpdGlvblJlc3RvcmF0aW9uOiAnZW5hYmxlZCd9KQogICAgXSwKICAgIGV4cG9ydHM6IFtSb3V0ZXJNb2R1bGVdCn0pCmV4cG9ydCBjbGFzcyBBcHBSb3V0aW5nTW9kdWxlIHsKfQo