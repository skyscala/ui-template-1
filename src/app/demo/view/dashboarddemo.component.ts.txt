aW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7RXZlbnRTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL2V2ZW50c2VydmljZSc7CmltcG9ydCB7U2VsZWN0SXRlbX0gZnJvbSAncHJpbWVuZy9hcGknOwppbXBvcnQge1Byb2R1Y3R9IGZyb20gJy4uL2RvbWFpbi9wcm9kdWN0JzsKaW1wb3J0IHtQcm9kdWN0U2VydmljZX0gZnJvbSAnLi4vc2VydmljZS9wcm9kdWN0c2VydmljZSc7CmltcG9ydCB7QnJlYWRjcnVtYlNlcnZpY2V9IGZyb20gJy4uLy4uL2FwcC5icmVhZGNydW1iLnNlcnZpY2UnOwoKQENvbXBvbmVudCh7CiAgICB0ZW1wbGF0ZVVybDogJy4vZGFzaGJvYXJkLmNvbXBvbmVudC5odG1sJywKICAgIHN0eWxlVXJsczogWycuL3RhYmxlZGVtby5zY3NzJ10sCiAgICBzdHlsZXM6IFtgCiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTYwcHgpIHsKICAgICAgICAgICAgOmhvc3QgOjpuZy1kZWVwIC5mYy1oZWFkZXItdG9vbGJhciB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgYF0KfSkKZXhwb3J0IGNsYXNzIERhc2hib2FyZERlbW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQgewoKICAgIGNpdGllczogU2VsZWN0SXRlbVtdOwoKICAgIHByb2R1Y3RzOiBQcm9kdWN0W107CgogICAgY2hhcnREYXRhOiBhbnk7CgogICAgZXZlbnRzOiBhbnlbXTsKCiAgICBmdWxsY2FsZW5kYXJPcHRpb25zOiBhbnk7CgogICAgY29uc3RydWN0b3IocHJpdmF0ZSBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSwgcHJpdmF0ZSBwcm9kdWN0U2VydmljZTogUHJvZHVjdFNlcnZpY2UsCiAgICAgICAgICAgICAgICBwcml2YXRlIGJyZWFkY3J1bWJTZXJ2aWNlOiBCcmVhZGNydW1iU2VydmljZSkgewogICAgICAgIHRoaXMuYnJlYWRjcnVtYlNlcnZpY2Uuc2V0SXRlbXMoWwogICAgICAgICAgICB7bGFiZWw6ICdEYXNoYm9hcmQnLCByb3V0ZXJMaW5rOiBbJyddfQogICAgICAgIF0pOwogICAgfQoKICAgIG5nT25Jbml0KCkgewogICAgICAgIHRoaXMucHJvZHVjdFNlcnZpY2UuZ2V0UHJvZHVjdHMoKS50aGVuKGRhdGEgPT4gdGhpcy5wcm9kdWN0cyA9IGRhdGEpOwogICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLmdldEV2ZW50cygpLnRoZW4oZXZlbnRzID0-IHsKICAgICAgICAgICAgdGhpcy5ldmVudHMgPSBldmVudHM7CiAgICAgICAgICAgIHRoaXMuZnVsbGNhbGVuZGFyT3B0aW9ucyA9IHsuLi50aGlzLmZ1bGxjYWxlbmRhck9wdGlvbnMsIC4uLntldmVudHM6IGV2ZW50c319OwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLmNpdGllcyA9IFtdOwogICAgICAgIHRoaXMuY2l0aWVzLnB1c2goe2xhYmVsOiAnU2VsZWN0IENpdHknLCB2YWx1ZTogbnVsbH0pOwogICAgICAgIHRoaXMuY2l0aWVzLnB1c2goe2xhYmVsOiAnTmV3IFlvcmsnLCB2YWx1ZToge2lkOiAxLCBuYW1lOiAnTmV3IFlvcmsnLCBjb2RlOiAnTlknfX0pOwogICAgICAgIHRoaXMuY2l0aWVzLnB1c2goe2xhYmVsOiAnUm9tZScsIHZhbHVlOiB7aWQ6IDIsIG5hbWU6ICdSb21lJywgY29kZTogJ1JNJ319KTsKICAgICAgICB0aGlzLmNpdGllcy5wdXNoKHtsYWJlbDogJ0xvbmRvbicsIHZhbHVlOiB7aWQ6IDMsIG5hbWU6ICdMb25kb24nLCBjb2RlOiAnTEROJ319KTsKICAgICAgICB0aGlzLmNpdGllcy5wdXNoKHtsYWJlbDogJ0lzdGFuYnVsJywgdmFsdWU6IHtpZDogNCwgbmFtZTogJ0lzdGFuYnVsJywgY29kZTogJ0lTVCd9fSk7CiAgICAgICAgdGhpcy5jaXRpZXMucHVzaCh7bGFiZWw6ICdQYXJpcycsIHZhbHVlOiB7aWQ6IDUsIG5hbWU6ICdQYXJpcycsIGNvZGU6ICdQUlMnfX0pOwoKICAgICAgICB0aGlzLmNoYXJ0RGF0YSA9IHsKICAgICAgICAgICAgbGFiZWxzOiBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnXSwKICAgICAgICAgICAgZGF0YXNldHM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0ZpcnN0IERhdGFzZXQnLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IFssIDYsIDMsIDIsIDcsIDksIF0sCiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjRkZDMTA3JywKICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uOiAuNAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1NlY29uZCBEYXRhc2V0JywKICAgICAgICAgICAgICAgICAgICBkYXRhOiBbLCAyLCAxLCAzLCA2LCA4LCBdLAogICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAzQTlGNCcsCiAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogLjQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgIH07CgogICAgICAgIHRoaXMuZnVsbGNhbGVuZGFyT3B0aW9ucyA9IHsKICAgICAgICAgICAgaW5pdGlhbERhdGU6ICcyMDIxLTAyLTAxJywKICAgICAgICAgICAgaGVhZGVyVG9vbGJhcjogewogICAgICAgICAgICAgICAgbGVmdDogJ3ByZXYsbmV4dCB0b2RheScsCiAgICAgICAgICAgICAgICBjZW50ZXI6ICd0aXRsZScsCiAgICAgICAgICAgICAgICByaWdodDogJ2RheUdyaWRNb250aCx0aW1lR3JpZFdlZWssdGltZUdyaWREYXknCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLAogICAgICAgICAgICBzZWxlY3RhYmxlOiB0cnVlLAogICAgICAgICAgICBzZWxlY3RNaXJyb3I6IHRydWUsCiAgICAgICAgICAgIGRheU1heEV2ZW50czogdHJ1ZSwKICAgICAgICB9OwogICAgfQp9Cg