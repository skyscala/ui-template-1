aW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7TWVudUl0ZW19IGZyb20gJ3ByaW1lbmcvYXBpJzsKaW1wb3J0IHtCcmVhZGNydW1iU2VydmljZX0gZnJvbSAnLi4vLi4vYXBwLmJyZWFkY3J1bWIuc2VydmljZSc7CgpAQ29tcG9uZW50KHsKICAgIHRlbXBsYXRlVXJsOiAnLi9wYW5lbHNkZW1vLmNvbXBvbmVudC5odG1sJywKICAgIHN0eWxlczogW2AKICAgICAgICA6aG9zdCA6Om5nLWRlZXAgYnV0dG9uIHsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAuMjVlbTsKICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC4yNWVtOwogICAgICAgIH0KCiAgICAgICAgOmhvc3QgOjpuZy1kZWVwIC5wLXNwbGl0YnV0dG9uIGJ1dHRvbiB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDsKICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDA7CiAgICAgICAgfQoKICAgICAgICA6aG9zdCA6Om5nLWRlZXAgLnAtc3BsaXR0ZXItcGFuZWwtbmVzdGVkIHsKICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5NjBweCkgewogICAgICAgICAgICAuY2FyZC50b29sYmFyLWRlbW8gewogICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBgXQp9KQpleHBvcnQgY2xhc3MgUGFuZWxzRGVtb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7CgogICAgaXRlbXM6IE1lbnVJdGVtW107CgogICAgY2FyZE1lbnU6IE1lbnVJdGVtW107CgogICAgY29uc3RydWN0b3IocHJpdmF0ZSBicmVhZGNydW1iU2VydmljZTogQnJlYWRjcnVtYlNlcnZpY2UpIHsKICAgICAgICB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLnNldEl0ZW1zKFsKICAgICAgICAgICAge2xhYmVsOiAnUGFuZWwnfQogICAgICAgIF0pOwogICAgfQoKICAgIG5nT25Jbml0KCkgewogICAgICAgIHRoaXMuaXRlbXMgPSBbCiAgICAgICAgICAgIHtsYWJlbDogJ0FuZ3VsYXIuaW8nLCBpY29uOiAncGkgcGktZXh0ZXJuYWwtbGluaycsIHVybDogJ2h0dHA6Ly9hbmd1bGFyLmlvJ30sCiAgICAgICAgICAgIHtsYWJlbDogJ1RoZW1pbmcnLCBpY29uOiAncGkgcGktYm9va21hcmsnLCByb3V0ZXJMaW5rOiBbJy90aGVtaW5nJ119CiAgICAgICAgXTsKCiAgICAgICAgdGhpcy5jYXJkTWVudSA9IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGFiZWw6ICdTYXZlJywgaWNvbjogJ3BpIHBpLWZ3IHBpLWNoZWNrJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsYWJlbDogJ1VwZGF0ZScsIGljb246ICdwaSBwaS1mdyBwaS1yZWZyZXNoJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsYWJlbDogJ0RlbGV0ZScsIGljb246ICdwaSBwaS1mdyBwaS10cmFzaCcKICAgICAgICAgICAgfSwKICAgICAgICBdOwogICAgfQp9Cg