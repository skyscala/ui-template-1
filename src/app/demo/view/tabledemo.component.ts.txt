aW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJzsKaW1wb3J0IHtDdXN0b21lciwgUmVwcmVzZW50YXRpdmV9IGZyb20gJy4uL2RvbWFpbi9jdXN0b21lcic7CmltcG9ydCB7Q3VzdG9tZXJTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL2N1c3RvbWVyc2VydmljZSc7CmltcG9ydCB7UHJvZHVjdH0gZnJvbSAnLi4vZG9tYWluL3Byb2R1Y3QnOwppbXBvcnQge1Byb2R1Y3RTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL3Byb2R1Y3RzZXJ2aWNlJzsKaW1wb3J0IHtUYWJsZX0gZnJvbSAncHJpbWVuZy90YWJsZSc7CmltcG9ydCB7QnJlYWRjcnVtYlNlcnZpY2V9IGZyb20gJy4uLy4uL2FwcC5icmVhZGNydW1iLnNlcnZpY2UnOwoKQENvbXBvbmVudCh7CiAgICB0ZW1wbGF0ZVVybDogJy4vdGFibGVkZW1vLmNvbXBvbmVudC5odG1sJywKICAgIHN0eWxlVXJsczogWycuL3RhYmxlZGVtby5zY3NzJ10sCiAgICBzdHlsZXM6IFtgCiAgICAgICAgOmhvc3QgOjpuZy1kZWVwIC5wLWRhdGF0YWJsZS1ncmlkbGluZXMgcC1wcm9ncmVzc0JhciB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTYwcHgpIHsKICAgICAgICAgICAgOmhvc3QgOjpuZy1kZWVwIC5wLWRhdGF0YWJsZS5wLWRhdGF0YWJsZS1jdXN0b21lcnMucm93ZXhwYW5kLXRhYmxlIC5wLWRhdGF0YWJsZS10Ym9keSA-IHRyID4gdGQ6bnRoLWNoaWxkKDYpIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgYF0sCn0pCmV4cG9ydCBjbGFzcyBUYWJsZURlbW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQgewoKICAgIGN1c3RvbWVyczE6IEN1c3RvbWVyW107CgogICAgY3VzdG9tZXJzMjogQ3VzdG9tZXJbXTsKCiAgICBjdXN0b21lcnMzOiBDdXN0b21lcltdOwoKICAgIHNlbGVjdGVkQ3VzdG9tZXJzMTogQ3VzdG9tZXJbXTsKCiAgICBzZWxlY3RlZEN1c3RvbWVyOiBDdXN0b21lcjsKCiAgICByZXByZXNlbnRhdGl2ZXM6IFJlcHJlc2VudGF0aXZlW107CgogICAgc3RhdHVzZXM6IGFueVtdOwoKICAgIHByb2R1Y3RzOiBQcm9kdWN0W107CgogICAgcm93R3JvdXBNZXRhZGF0YTogYW55OwoKICAgIGFjdGl2aXR5VmFsdWVzOiBudW1iZXJbXSA9IFswLCAxMDBdOwoKICAgIEBWaWV3Q2hpbGQoJ2R0JykgdGFibGU6IFRhYmxlOwoKICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3VzdG9tZXJTZXJ2aWNlOiBDdXN0b21lclNlcnZpY2UsIHByaXZhdGUgcHJvZHVjdFNlcnZpY2U6IFByb2R1Y3RTZXJ2aWNlLAogICAgICAgICAgICAgICAgcHJpdmF0ZSBicmVhZGNydW1iU2VydmljZTogQnJlYWRjcnVtYlNlcnZpY2UpIHsKICAgICAgICB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLnNldEl0ZW1zKFsKICAgICAgICAgICAge2xhYmVsOiAnVGFibGUnfQogICAgICAgIF0pOwogICAgfQoKICAgIG5nT25Jbml0KCkgewogICAgICAgIHRoaXMuY3VzdG9tZXJTZXJ2aWNlLmdldEN1c3RvbWVyc0xhcmdlKCkudGhlbihjdXN0b21lcnMgPT4gewogICAgICAgICAgICB0aGlzLmN1c3RvbWVyczEgPSBjdXN0b21lcnM7CiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgICAgICAgdGhpcy5jdXN0b21lcnMxLmZvckVhY2goY3VzdG9tZXIgPT4gY3VzdG9tZXIuZGF0ZSA9IG5ldyBEYXRlKGN1c3RvbWVyLmRhdGUpKTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLmN1c3RvbWVyU2VydmljZS5nZXRDdXN0b21lcnNNZWRpdW0oKS50aGVuKGN1c3RvbWVycyA9PiB0aGlzLmN1c3RvbWVyczIgPSBjdXN0b21lcnMpOwogICAgICAgIHRoaXMuY3VzdG9tZXJTZXJ2aWNlLmdldEN1c3RvbWVyc01lZGl1bSgpLnRoZW4oY3VzdG9tZXJzID0-IHRoaXMuY3VzdG9tZXJzMyA9IGN1c3RvbWVycyk7CiAgICAgICAgdGhpcy5wcm9kdWN0U2VydmljZS5nZXRQcm9kdWN0c1dpdGhPcmRlcnNTbWFsbCgpLnRoZW4oZGF0YSA9PiB0aGlzLnByb2R1Y3RzID0gZGF0YSk7CgogICAgICAgIHRoaXMucmVwcmVzZW50YXRpdmVzID0gWwogICAgICAgICAgICB7bmFtZTogJ0FteSBFbHNuZXInLCBpbWFnZTogJ2FteWVsc25lci5wbmcnfSwKICAgICAgICAgICAge25hbWU6ICdBbm5hIEZhbGknLCBpbWFnZTogJ2FubmFmYWxpLnBuZyd9LAogICAgICAgICAgICB7bmFtZTogJ0FzaXlhIEphdmF5YW50JywgaW1hZ2U6ICdhc2l5YWphdmF5YW50LnBuZyd9LAogICAgICAgICAgICB7bmFtZTogJ0Jlcm5hcmRvIERvbWluaWMnLCBpbWFnZTogJ2Jlcm5hcmRvZG9taW5pYy5wbmcnfSwKICAgICAgICAgICAge25hbWU6ICdFbHdpbiBTaGFydmlsbCcsIGltYWdlOiAnZWx3aW5zaGFydmlsbC5wbmcnfSwKICAgICAgICAgICAge25hbWU6ICdJb25pIEJvd2NoZXInLCBpbWFnZTogJ2lvbmlib3djaGVyLnBuZyd9LAogICAgICAgICAgICB7bmFtZTogJ0l2YW4gTWFnYWxoYWVzJywgaW1hZ2U6ICdpdmFubWFnYWxoYWVzLnBuZyd9LAogICAgICAgICAgICB7bmFtZTogJ09ueWFtYSBMaW1iYScsIGltYWdlOiAnb255YW1hbGltYmEucG5nJ30sCiAgICAgICAgICAgIHtuYW1lOiAnU3RlcGhlbiBTaGF3JywgaW1hZ2U6ICdzdGVwaGVuc2hhdy5wbmcnfSwKICAgICAgICAgICAge25hbWU6ICdYdVh1ZSBGZW5nJywgaW1hZ2U6ICd4dXh1ZWZlbmcucG5nJ30KICAgICAgICBdOwoKICAgICAgICB0aGlzLnN0YXR1c2VzID0gWwogICAgICAgICAgICB7bGFiZWw6ICdVbnF1YWxpZmllZCcsIHZhbHVlOiAndW5xdWFsaWZpZWQnfSwKICAgICAgICAgICAge2xhYmVsOiAnUXVhbGlmaWVkJywgdmFsdWU6ICdxdWFsaWZpZWQnfSwKICAgICAgICAgICAge2xhYmVsOiAnTmV3JywgdmFsdWU6ICduZXcnfSwKICAgICAgICAgICAge2xhYmVsOiAnTmVnb3RpYXRpb24nLCB2YWx1ZTogJ25lZ290aWF0aW9uJ30sCiAgICAgICAgICAgIHtsYWJlbDogJ1JlbmV3YWwnLCB2YWx1ZTogJ3JlbmV3YWwnfSwKICAgICAgICAgICAge2xhYmVsOiAnUHJvcG9zYWwnLCB2YWx1ZTogJ3Byb3Bvc2FsJ30KICAgICAgICBdOwogICAgfQoKICAgIG9uU29ydCgpIHsKICAgICAgICB0aGlzLnVwZGF0ZVJvd0dyb3VwTWV0YURhdGEoKTsKICAgIH0KCiAgICB1cGRhdGVSb3dHcm91cE1ldGFEYXRhKCkgewogICAgICAgIHRoaXMucm93R3JvdXBNZXRhZGF0YSA9IHt9OwoKICAgICAgICBpZiAodGhpcy5jdXN0b21lcnMzKSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jdXN0b21lcnMzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBjb25zdCByb3dEYXRhID0gdGhpcy5jdXN0b21lcnMzW2ldOwogICAgICAgICAgICAgICAgY29uc3QgcmVwcmVzZW50YXRpdmVOYW1lID0gcm93RGF0YS5yZXByZXNlbnRhdGl2ZS5uYW1lOwoKICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dHcm91cE1ldGFkYXRhW3JlcHJlc2VudGF0aXZlTmFtZV0gPSB7IGluZGV4OiAwLCBzaXplOiAxIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1Jvd0RhdGEgPSB0aGlzLmN1c3RvbWVyczNbaSAtIDFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUm93R3JvdXAgPSBwcmV2aW91c1Jvd0RhdGEucmVwcmVzZW50YXRpdmUubmFtZTsKICAgICAgICAgICAgICAgICAgICBpZiAocmVwcmVzZW50YXRpdmVOYW1lID09PSBwcmV2aW91c1Jvd0dyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93R3JvdXBNZXRhZGF0YVtyZXByZXNlbnRhdGl2ZU5hbWVdLnNpemUrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm93R3JvdXBNZXRhZGF0YVtyZXByZXNlbnRhdGl2ZU5hbWVdID0geyBpbmRleDogaSwgc2l6ZTogMSB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo