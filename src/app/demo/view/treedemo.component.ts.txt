aW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7Tm9kZVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2Uvbm9kZXNlcnZpY2UnOwppbXBvcnQge1RyZWVOb2RlfSBmcm9tICdwcmltZW5nL2FwaSc7CmltcG9ydCB7QnJlYWRjcnVtYlNlcnZpY2V9IGZyb20gJy4uLy4uL2FwcC5icmVhZGNydW1iLnNlcnZpY2UnOwoKQENvbXBvbmVudCh7CiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZWRlbW8uY29tcG9uZW50Lmh0bWwnCn0pCmV4cG9ydCBjbGFzcyBUcmVlRGVtb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7CgoKICAgIGZpbGVzMTogVHJlZU5vZGVbXTsKCiAgICBmaWxlczI6IFRyZWVOb2RlW107CgogICAgZmlsZXMzOiBUcmVlTm9kZVtdOwoKICAgIHNlbGVjdGVkRmlsZXMxOiBUcmVlTm9kZTsKCiAgICBzZWxlY3RlZEZpbGVzMjogVHJlZU5vZGVbXTsKCiAgICBzZWxlY3RlZEZpbGVzMzogVHJlZU5vZGU7CgogICAgY29sczogYW55W107CgogICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlU2VydmljZTogTm9kZVNlcnZpY2UsIHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7CiAgICAgICAgdGhpcy5icmVhZGNydW1iU2VydmljZS5zZXRJdGVtcyhbCiAgICAgICAgICAgIHtsYWJlbDogJ1RyZWUnfQogICAgICAgIF0pOwogICAgfQoKICAgIG5nT25Jbml0KCkgewogICAgICAgIHRoaXMubm9kZVNlcnZpY2UuZ2V0RmlsZXMoKS50aGVuKGZpbGVzID0-IHRoaXMuZmlsZXMxID0gZmlsZXMpOwogICAgICAgIHRoaXMubm9kZVNlcnZpY2UuZ2V0RmlsZXN5c3RlbSgpLnRoZW4oZmlsZXMgPT4gdGhpcy5maWxlczIgPSBmaWxlcyk7CiAgICAgICAgdGhpcy5ub2RlU2VydmljZS5nZXRGaWxlcygpLnRoZW4oZmlsZXMgPT4gewogICAgICAgICAgICB0aGlzLmZpbGVzMyA9IFt7CiAgICAgICAgICAgICAgICBsYWJlbDogJ1Jvb3QnLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IGZpbGVzCiAgICAgICAgICAgIH1dOwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLmNvbHMgPSBbCiAgICAgICAgICAgIHsgZmllbGQ6ICduYW1lJywgaGVhZGVyOiAnTmFtZScgfSwKICAgICAgICAgICAgeyBmaWVsZDogJ3NpemUnLCBoZWFkZXI6ICdTaXplJyB9LAogICAgICAgICAgICB7IGZpZWxkOiAndHlwZScsIGhlYWRlcjogJ1R5cGUnIH0KICAgICAgICBdOwogICAgfQp9Cg