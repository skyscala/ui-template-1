aW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7RXZlbnRTZXJ2aWNlfSBmcm9tICcuLi9kZW1vL3NlcnZpY2UvZXZlbnRzZXJ2aWNlJzsKaW1wb3J0IHtCcmVhZGNydW1iU2VydmljZX0gZnJvbSAiLi4vYXBwLmJyZWFkY3J1bWIuc2VydmljZSI7CgpAQ29tcG9uZW50KHsKICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAuY2FsZW5kYXIuY29tcG9uZW50Lmh0bWwnLAogICAgc3R5bGVzOiBbYAogICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk2MHB4KSB7CiAgICAgICAgICAgIDpob3N0IDo6bmctZGVlcCAuZmMtaGVhZGVyLXRvb2xiYXIgewogICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIGBdCn0pCmV4cG9ydCBjbGFzcyBBcHBDYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7CgogICAgZXZlbnRzOiBhbnlbXTsKCiAgICBvcHRpb25zOiBhbnk7CgogICAgaGVhZGVyOiBhbnk7CgogICAgZXZlbnREaWFsb2c6IGJvb2xlYW47CgogICAgY2hhbmdlZEV2ZW50OiBhbnk7CgogICAgY2xpY2tlZEV2ZW50ID0gbnVsbDsKCiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGV2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlLCBwcml2YXRlIGJyZWFkY3J1bWJTZXJ2aWNlOiBCcmVhZGNydW1iU2VydmljZSkgewogICAgICAgIHRoaXMuYnJlYWRjcnVtYlNlcnZpY2Uuc2V0SXRlbXMoWwogICAgICAgICAgICB7bGFiZWw6ICdDYWxlbmRhcid9CiAgICAgICAgXSk7CiAgICB9CgogICAgbmdPbkluaXQoKSB7CiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuZ2V0RXZlbnRzKCkudGhlbihldmVudHMgPT4gewogICAgICAgICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50czsKICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gey4uLnRoaXMub3B0aW9ucywgLi4ue2V2ZW50czogZXZlbnRzfX07CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMub3B0aW9ucyA9IHsKICAgICAgICAgICAgaW5pdGlhbERhdGU6ICcyMDIxLTAyLTAxJywKICAgICAgICAgICAgaGVhZGVyVG9vbGJhcjogewogICAgICAgICAgICAgICAgbGVmdDogJ3ByZXYsbmV4dCB0b2RheScsCiAgICAgICAgICAgICAgICBjZW50ZXI6ICd0aXRsZScsCiAgICAgICAgICAgICAgICByaWdodDogJ2RheUdyaWRNb250aCx0aW1lR3JpZFdlZWssdGltZUdyaWREYXknCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLAogICAgICAgICAgICBzZWxlY3RhYmxlOiB0cnVlLAogICAgICAgICAgICBzZWxlY3RNaXJyb3I6IHRydWUsCiAgICAgICAgICAgIGRheU1heEV2ZW50czogdHJ1ZSwKICAgICAgICAgICAgZXZlbnRDbGljazogKGUpID0-IHsKICAgICAgICAgICAgICAgIHRoaXMuZXZlbnREaWFsb2cgPSB0cnVlOwoKICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tlZEV2ZW50ID0gZS5ldmVudDsKCiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWRFdmVudC50aXRsZSA9IHRoaXMuY2xpY2tlZEV2ZW50LnRpdGxlOwogICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkRXZlbnQuc3RhcnQgPSB0aGlzLmNsaWNrZWRFdmVudC5zdGFydDsKICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlZEV2ZW50LmVuZCA9IHRoaXMuY2xpY2tlZEV2ZW50LmVuZDsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMuY2hhbmdlZEV2ZW50ID0ge3RpdGxlOiAnJywgc3RhcnQ6IG51bGwsIGVuZDogJycsIGFsbERheTogbnVsbH07CiAgICB9CgogICAgc2F2ZSgpIHsKICAgICAgICB0aGlzLmV2ZW50RGlhbG9nID0gZmFsc2U7CgogICAgICAgIHRoaXMuY2xpY2tlZEV2ZW50LnNldFByb3AoJ3RpdGxlJywgdGhpcy5jaGFuZ2VkRXZlbnQudGl0bGUpOwogICAgICAgIHRoaXMuY2xpY2tlZEV2ZW50LnNldFN0YXJ0KHRoaXMuY2hhbmdlZEV2ZW50LnN0YXJ0KTsKICAgICAgICB0aGlzLmNsaWNrZWRFdmVudC5zZXRFbmQodGhpcy5jaGFuZ2VkRXZlbnQuZW5kKTsKICAgICAgICB0aGlzLmNsaWNrZWRFdmVudC5zZXRBbGxEYXkodGhpcy5jaGFuZ2VkRXZlbnQuYWxsRGF5KTsKCiAgICAgICAgdGhpcy5jaGFuZ2VkRXZlbnQgPSB7dGl0bGU6ICcnLCBzdGFydDogbnVsbCwgZW5kOiAnJywgYWxsRGF5OiBudWxsfTsKICAgIH0KCiAgICByZXNldCgpIHsKICAgICAgICB0aGlzLmNoYW5nZWRFdmVudC50aXRsZSA9IHRoaXMuY2xpY2tlZEV2ZW50LnRpdGxlOwogICAgICAgIHRoaXMuY2hhbmdlZEV2ZW50LnN0YXJ0ID0gdGhpcy5jbGlja2VkRXZlbnQuc3RhcnQ7CiAgICAgICAgdGhpcy5jaGFuZ2VkRXZlbnQuZW5kID0gdGhpcy5jbGlja2VkRXZlbnQuZW5kOwogICAgfQp9Cg