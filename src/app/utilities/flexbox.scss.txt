Omhvc3QgOjpuZy1kZWVwIC5mbGV4Ym94LWRlbW8gewogICAgcHJlW2NsYXNzKj0ibGFuZ3VhZ2UtIl0gewogICAgICAgIGJveC1zaGFkb3c6IG5vbmU7CiAgICAgICAgYm9yZGVyOiAwIG5vbmU7CgogICAgICAgICY6YmVmb3JlLCAmOmFmdGVyIHsKICAgICAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OwogICAgICAgIH0KCiAgICAgICAgY29kZSB7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxMHB4IHNvbGlkIHZhcigtLXN1cmZhY2UtZCkgIWltcG9ydGFudDsKICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdXJmYWNlLWUpICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIG1hcmdpbjogMWVtIDA7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwoKICAgICAgICAgICAgLnRva2VuIHsKICAgICAgICAgICAgICAgICYudGFnLAogICAgICAgICAgICAgICAgJi5rZXl3b3JkIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzIxOTZGMyAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICYuYXR0ci1uYW1lLAogICAgICAgICAgICAgICAgJi5hdHRyLXN0cmluZyB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMyMTk2RjMgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAmLmF0dHItdmFsdWUgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjNENBRjUwICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJi5wdW5jdHVhdGlvbiB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICYub3BlcmF0b3IsCiAgICAgICAgICAgICAgICAmLnN0cmluZyB7CiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLnAtZC1mbGV4ID4gZGl2LAogICAgLmJveCB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VyZmFjZS1lKTsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgcGFkZGluZzogMXJlbTsKICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgYm94LXNoYWRvdzogMCAycHggMXB4IC0xcHggcmdiYSgwLCAwLCAwLCAuMiksIDAgMXB4IDFweCAwIHJnYmEoMCwgMCwgMCwgLjE0KSwgMCAxcHggM3B4IDAgcmdiYSgwLCAwLCAwLCAuMTIpOwogICAgfQp9Cg