/*Overview*/
$overviewTextColor: #ffffff;

/*Stats*/
$statsBgColor: #ffffff;
$statsBorderColor: #d6d7d9;
$statsIconBgColor: #ffffff;
$statsSubtitleTextColor: #00bfe7;
$statsSubtitleColor: #aeb0b5;

/*Weekly Tasks*/
$addtaskBgColor: #f6f6f5;
$tasksIconColor: #aeb0b5;
$daytagBgColor: #e4e2e0;

/*Resolution Center*/
$estimationTextColor: #aeb0b5;
$estimatedHourTextColor: #e59393;

/*Team*/
$teamContentHoverBgColor: #f2f3f3;
$teamPrimaryTextColor: #212121;
$teamSecondaryTextColor: #aeb0b5;
$contactIconBgColor: #0872b9;
$contactIconColor: #ffffff;

/*Chat*/
$messagefromBorderColor: #4aa564;
$messageownBorderColor: #e31c3d;
$messageBgColor: #f4f4f4;
$messageTimeTextColor: #aeb0b5;
$messageBorderColor: #d6d7d9;
$messageIconColor: #d6d7d9;


/*Daily Sales*/
$salesHoverBgColor: #f1f1f1;
$salesColumnHeaderColor: #424242;
$salesRowTextColor: #212121;
$salesUpIconColor: #4caf50;
$salesDownIconColor: #f44336;

/*Timeline*/
$timelineSeperatorColor: #dddddd;
$loveNotificationBgColor: #f8dede;
$loveNotificationTextColor: #cd2026;
$checkedNotificationBgColor: #e1f3f8;
$checkedNotificationTextColor: #00a6d2;
$eventNotificationBgColor: #fff1d2;
$eventNotificationTextColor: #f39f19;
$notificationTimeColor: #5b616b;

/* Profile */
$profileTextColor: #212121;

.dashboard {
    .overview-box {
        color: $overviewTextColor;
        min-height: 120px;
        position: relative;

        i {
            float: right;
            font-size: 21px;
            position: absolute;
            top: 10px;
            right: 10px;
        }

        img {
            position: absolute;
            right: 0;
            width: 90px;
            bottom: 0;
        }

        .overview-title {
            line-height: 20px;
            font-size: 16px;
            letter-spacing: 0.8px;
            text-align: left;
            margin-bottom: 5px;
        }

        .overview-numbers {
            line-height: 31px;
            font-size: 24px;
            text-align: left;
            margin-bottom: 8px;
        }

        .overview-ratios {
            line-height: 18px;
            font-size: 14px;
            text-align: left;
            opacity: 0.95;
        }

        &.monthly-sales {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            position: relative;
            padding: 10px 10px 10px 20px;
            @include background-gradient-with-degree(240deg, #ff7295, #fe875d);
        }

        &.monthly-views {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            position: relative;
            padding: 10px 10px 10px 20px;
            @include background-gradient-with-degree(240deg, #00aadf, #0071bc);
        }

        &.monthly-users {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            position: relative;
            padding: 10px 10px 10px 20px;
            @include background-gradient-with-degree(240deg, #4b7ecf, #8e70ee);
        }
    }

    .stats {
        background-color: $statsBgColor;
        min-height: 120px;
        position: relative;
        margin-top: 29px;
        border-top: 7px solid $statsTopBorderColor;
        border-bottom: solid 1px $statsBorderColor;
        border-right: solid 1px $statsBorderColor;
        border-left: solid 1px $statsBorderColor;
        text-align: center;
        @include border-box();

        .stats-icon {
            display: inline-block;
            position: relative;
            top: -7px;
            background: $statsIconBgColor;
            padding: 0 5px;
            height: 7px;

            img {
                position: relative;
                top: -10px;
                margin-bottom: -10px;
            }
        }

        .message-icon {
            height: 34px;
            width: 44px;
        }

        .doc-icon {
            height: 34px;
            width: 25px;
        }

        .mark-icon {
            height: 34px;
            width: 25px;
        }

        img.profile-icon {
            /*top: -15px;
                margin-bottom: -5px;*/
            height: 34px;
            width: 34px;
        }

        .stats-numbers {
            line-height: 25px;
            font-size: 20px;
            font-weight: bold;
        }

        .stats-title {
            line-height: 21px;
            font-size: 17px;
        }

        .stats-subtitle {
            line-height: 18px;
            font-size: 14px;
            color: $statsSubtitleColor;

            span {
                color: $statsSubtitleTextColor;
            }
        }
    }

    .p-panel {
        .p-panel-title {
            margin: 0;
        }

        .p-panel-content {
            padding: 17px;
        }
    }

    .weekly-tasks {
        ul {
            padding: 0;
            margin: 0;
            list-style-type: none;

            li {
                padding: 8px 0;

                &:first-child {
                    padding-top: 0;
                }

                &:last-child {
                    padding-bottom: 0;
                }

                .p-checkbox {
                    vertical-align: middle;
                    margin-right: 6px;
                }

                > span {
                    vertical-align: middle;
                }

                .weekly-task-status {
                    float: right;

                    i {
                        font-size: 13px;
                        color: $textSecondaryColor;
                        margin-left: 6px;
                        width: 16px;
                    }

                    .day {
                        color: darken($tasksIconColor, 50%);
                        background-color: $daytagBgColor;
                        text-align: center;
                        min-width: 60px;
                        display: inline-block;
                    }
                }
            }
        }
    }

    .resolution-center {
        padding-bottom: 8px;

        .p-inputtext {
            display: block;
        }

        .p-outputlabel {
            vertical-align: middle;
        }

        .p-button {
            margin-top: 5px;
            display: block;
        }
    }

    .team {
        .p-panel-content {
            padding: 0;
        }

        ul {
            list-style-type: none;
            margin: 0;
            padding: 0;

            li {
                padding: 16px;
                border-left: 3px solid rgba(0, 0, 0, 0);
                @include clearfix();

                &:hover {
                    background-color: $teamContentHoverBgColor;
                    border-color: $teamContentHoverBorderColor;
                }

                .team-box {
                    display: inline-block;
                    vertical-align: middle;
                }

                .team-member {
                    text-align: left;
                    display: block;
                    font-weight: 600;
                    color: $teamPrimaryTextColor;
                }

                img {
                    width: 35px;
                    height: 35px;
                    vertical-align: middle;
                    display: inline-block;
                    margin-right: 6px;
                }

                a {
                    display: block;
                    float: right;
                    background-color: $contactIconBgColor;
                    border-radius: 100%;
                    height: 30px;
                    width: 30px;
                    line-height: 30px;
                    margin-left: 6px;
                    text-align: center;
                    margin-top: 4px;

                    i {
                        line-height: inherit;
                        font-size: 22px;
                        color: $contactIconColor;
                    }
                }
            }
        }
    }

    .chart {
        .p-panel-content {
            overflow: auto;
        }
    }

    .chat {
        margin-top: 20px;

        .p-panel-content {
            padding: 0;
        }

        ul {
            padding: 0;
            margin: 0;
            list-style-type: none;

            li {
                padding: 16px 0;
                @include clearfix();
                font-size: 0;

                .message-meta {
                    font-size: $fontSize;
                    width: 160px;
                    @include border-box();
                    display: inline-block;
                    vertical-align: top;
                    padding: 8px;
                    text-align: left;

                    img {
                        width: 48px;
                        height: 48px;
                        display: block;
                    }

                    .name {
                        font-weight: 600;
                    }

                    .time {
                        color: $teamSecondaryTextColor;
                        display: block;
                    }
                }

                .message {
                    font-size: $fontSize;
                    @include border-box();
                    width: calc(100% - 160px);
                    padding: 12px;
                    background-color: $messageBgColor;
                    display: inline-block;
                    vertical-align: top;
                }

                &.message-from {
                    .message-meta {
                        border-left: 4px solid $messagefromBorderColor;

                        img {
                            float: left;
                            margin-right: 8px;
                        }
                    }
                }

                &.message-own {
                    .message-meta {
                        border-right: 4px solid $messageownBorderColor;

                        img {
                            float: right;
                            margin-left: 8px;
                        }
                    }
                }
            }
        }

        .write-message {
            border-top: 1px solid $messageBorderColor;
            margin-top: 10px;
            position: relative;

            i {
                font-size: 24px;
                color: $messageIconColor;
                position: absolute;
                left: 8px;
                top: 50%;
                margin-top: -14px;
            }

            input {
                @include border-box();
                border: 0 none;
                width: 100%;
                height: 40px;
                font-size: 14px;
                padding-left: 36px;

                &:focus {
                    outline: 0 none;
                }
            }
        }
    }

    .daily-sales {
        margin-top: 20px;

        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }

        thead {
            text-align: right;
            background-color: #ffffff;

            th {
                padding: 8px 16px;
            }
        }

        tbody {
            tr:nth-child(even) {
                background: #ffffff
            }

            tr:nth-child(odd) {
                background: #f1f1f1
            }

            td {
                border-color: transparent;
                padding: 8px 16px;
            }
        }

        tr {
            th {
                font-weight: 600;
                color: $salesColumnHeaderColor;
            }
        }

        td {
            color: $salesRowTextColor;
            text-align: right;

            &:first-child {
                text-align: left;
            }

            &:last-child {
                button:first-child {
                    margin-right: 4px;
                }
            }

            img {
                width: 26px;
                height: 26px;
                padding: 8px;
                vertical-align: middle;
            }

            .pi-angle-up {
                color: $salesUpIconColor;
                font-size: 22px;
                padding-left: 10px;
            }

            .pi-angle-down {
                color: $salesDownIconColor;
                font-size: 22px;
                padding-left: 10px;
            }
        }
    }

    .schedule {
        margin-top: 20px;
    }

    .timeline {
        &.p-panel {
            .p-panel-content {
                position: relative;

                .timeline-line {
                    position: absolute;
                    left: 50%;
                    width: 1px;
                    height: 100%;
                    margin-left: -1px;
                    background: $timelineSeperatorColor;
                    top: 0;
                }
            }
        }

        ul {
            list-style-type: none;
            padding: 0;
            position: relative;

            li {
                display: block;
                position: relative;
                width: 100%;
                margin-bottom: 30px;

                .timeline-message {
                    width: 45%;
                    overflow: hidden;
                    position: relative;

                    img {
                        position: absolute;
                        width: 100%;
                        height: auto;
                        z-index: 0;
                    }

                    span {
                        position: relative;
                        z-index: 10;
                        display: block;
                        padding: 15px;

                        &.love {
                            color: $loveNotificationTextColor;
                            background-color: $loveNotificationBgColor;
                            font-weight: 600;
                            text-align: right;
                        }

                        &.checked {
                            font-weight: 600;
                            color: $checkedNotificationTextColor;
                            background-color: $checkedNotificationBgColor;
                        }

                        &.event {
                            color: $eventNotificationTextColor;
                            font-weight: 600;
                            background-color: $eventNotificationBgColor;
                        }
                    }
                }

                .timeline-icon {
                    z-index: 100;
                    line-height: 30px;

                    img {
                        width: 30px;
                        height: 30px;
                    }

                    span {
                        font-weight: 600;
                        color: $notificationTimeColor;
                    }
                }

                &.odd {
                    .timeline-icon {
                        position: absolute;
                        left: 50%;
                        margin-left: -16px;

                        span {
                            float: right;
                        }

                        img {
                            float: left;
                            margin-right: 15px;
                        }
                    }

                    .timeline-message {
                        float: left;

                        span {
                            padding: 15px;
                            text-align: right;
                        }
                    }
                }

                &.even {
                    .timeline-icon {
                        position: absolute;
                        right: 50%;
                        margin-right: -16px;
                        text-align: right;

                        span {
                            float: left;
                        }

                        img {
                            float: right;
                            margin-left: 15px;
                        }
                    }

                    .timeline-message {
                        float: right;

                        span {
                            padding: 15px;
                        }
                    }
                }
            }
        }
    }

    .inventory-list {
        .p-panel-content {
            padding: 0;
        }
    }

    .profile-details {
        .p-panel-content {
            padding: 0;
            text-align: center;
        }

        img {
            width: 100%;
        }

        .profile-avatar {
            width: 120px;
            height: 120px;
            top: -60px;
            position: relative;
        }

        .profile-name {
            font-weight: 600;
            color: $profileTextColor;
            text-align: center;
            display: block;
            margin-top: -75px;
        }

        .profile-role {
            color: $profileTextColor;
            text-align: center;
            display: block;
        }

        .p-button {
            margin-top: 16px;
        }

        .profile-statistics-panel {
            text-align: center;
            display: inline-block;
            position: relative;

            .profile-statistics {
                font-weight: 600;
                font-size: 16px;
                display: block;
            }

            .statistics-title {
                border-bottom: 4px solid transparent;
                padding-bottom: 10px;
            }
        }
    }

    .product-badge {
        border-radius: 2px;
        padding: .25em .5rem;
        text-transform: uppercase;
        font-weight: 700;
        font-size: 12px;
        letter-spacing: .3px;

        &.status-instock {
            background: #C8E6C9;
            color: #256029;
        }

        &.status-outofstock {
            background: #FFCDD2;
            color: #C63737;
        }

        &.status-lowstock {
            background: #FEEDAF;
            color: #8A5340;
        }
    }
}
