LmV4Y2VwdGlvbi1ib2R5IHsKICAgIC5leGNlcHRpb24tdG9wYmFyIHsKICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgdG9wOiAwOwogICAgICAgIGxlZnQ6IDA7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgei1pbmRleDogOTk5OTk7CiAgICAgICAgQGluY2x1ZGUgYm9yZGVyLWJveCgpOwogICAgICAgIGhlaWdodDogNjBweDsKICAgICAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWdyYWRpZW50LWRpYWdvbmFsKCR0b3BiYXJMZWZ0QmdDb2xvciwgJHRvcGJhclJpZ2h0QmdDb2xvcik7CiAgICAgICAgLmxvZ28gewogICAgICAgICAgICBAaW5jbHVkZSBib3JkZXItYm94KCk7CiAgICAgICAgICAgIHdpZHRoOiAyMzBweDsKICAgICAgICAgICAgcGFkZGluZzogMTBweCAxMDBweDsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGltZyB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwcHg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAuZXhjZXB0aW9uLWltYWdlIHsKICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgdG9wOiA2MHB4OwogICAgICAgIHdpZHRoOiAxMDAlOwogICAgfQogICAgLmV4Y2VwdGlvbi1wYW5lbCB7CiAgICAgICAgQGluY2x1ZGUgYm9yZGVyLWJveCgpOwogICAgICAgIHBhZGRpbmc6IDI0JSAwIDAgMTAwcHg7CiAgICAgICAgd2lkdGg6IDUwMHB4OwogICAgICAgIC5leGNlcHRpb24taWNvbiB7CiAgICAgICAgICAgIG1heC13aWR0aDogNzVweDsKICAgICAgICAgICAgbWF4LWhlaWdodDogNzVweDsKICAgICAgICB9CiAgICB9Cn0KCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY0MHB4KSB7CiAgICAuZXhjZXB0aW9uLWJvZHkgewogICAgICAgIC5leGNlcHRpb24tcGFuZWwgewogICAgICAgICAgICBwYWRkaW5nOiAyMDBweCAyNXB4IDAgMjVweDsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICB9Cn0