Lmludm9pY2UgewogICAgcGFkZGluZzogMnJlbTsKCiAgICAuaW52b2ljZS1oZWFkZXIgewogICAgICAgIEBpbmNsdWRlIGZsZXgoKTsKICAgICAgICBAaW5jbHVkZSBmbGV4LWp1c3RpZnktYmV0d2VlbigpOwogICAgfQoKICAgIC5pbnZvaWNlLWNvbXBhbnkgewogICAgICAgIC5sb2dvLWltYWdlIHsKICAgICAgICAgICAgd2lkdGg6IDc1cHg7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC41cmVtOwogICAgICAgIH0KCiAgICAgICAgZGl2IHsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjVyZW07CiAgICAgICAgfQoKICAgICAgICAuY29tcGFueS1uYW1lIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxLjVyZW07CiAgICAgICAgfQogICAgfQoKICAgIC5pbnZvaWNlLXRpdGxlIHsKICAgICAgICBmb250LXNpemU6IDJyZW07CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTsKICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgIH0KCiAgICAuaW52b2ljZS1kZXRhaWxzIHsKICAgICAgICB3aWR0aDogMTVyZW07CiAgICAgICAgQGluY2x1ZGUgZmxleCgpOwogICAgICAgIEBpbmNsdWRlIGZsZXgtd3JhcCh3cmFwKTsKCiAgICAgICAgPiBkaXYgewogICAgICAgICAgICB3aWR0aDogNTAlOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTsKICAgICAgICB9CgogICAgICAgIC5pbnZvaWNlLWxhYmVsIHsKICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICB9CgogICAgICAgIC5pbnZvaWNlLXZhbHVlIHsKICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgICAgICAgfQogICAgfQoKICAgIC5pbnZvaWNlLXRvIHsKICAgICAgICBtYXJnaW4tdG9wOiAxLjVyZW07CiAgICAgICAgcGFkZGluZy10b3A6IDJyZW07CiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRkaXZpZGVyQ29sb3I7CgogICAgICAgIC5iaWxsLXRvIHsKICAgICAgICAgICAgZm9udC1zaXplOiAxLjI1cmVtOwogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTsKICAgICAgICB9CgogICAgICAgIC5pbnZvaWNlLXRvLWluZm8gewogICAgICAgICAgICBkaXYgewogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjVyZW07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLmludm9pY2UtaXRlbXMgewogICAgICAgIG1hcmdpbi10b3A6IDJyZW07CiAgICAgICAgcGFkZGluZy10b3A6IDJyZW07CgogICAgICAgIHRhYmxlIHsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CgogICAgICAgICAgICB0ciB7CiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGRpdmlkZXJDb2xvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGggewogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGgsIHRkIHsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGg6Zmlyc3QtY2hpbGQsIHRkOmZpcnN0LWNoaWxkIHsKICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLmludm9pY2Utc3VtbWFyeSB7CiAgICAgICAgQGluY2x1ZGUgZmxleCgpOwogICAgICAgIEBpbmNsdWRlIGZsZXgtanVzdGlmeS1iZXR3ZWVuKCk7CiAgICAgICAgbWFyZ2luLXRvcDogMi41cmVtOwogICAgICAgIHBhZGRpbmctdG9wOiAyLjVyZW07CgogICAgICAgIC5pbnZvaWNlLXZhbHVlIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICB9CiAgICB9Cn0KCkBtZWRpYSBwcmludHsKICAgIGJvZHkgKiB7CiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuOwogICAgfQogICAgI2ludm9pY2UtY29udGVudCAqIHsKICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlOwogICAgfQogICAgI2ludm9pY2UtY29udGVudCB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgIGxlZnQ6IDA7CiAgICAgICAgdG9wOiAwOwogICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgbWFyZ2luOiAwOwogICAgfQp9CgoKCg