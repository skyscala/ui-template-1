LmxheW91dC13cmFwcGVyIHsKICAgICNsYXlvdXQtbWVnYW1lbnUtYnV0dG9uIHsKICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgbGVmdDogMjkwcHg7CiAgICAgICAgaGVpZ2h0OiA2MHB4OwogICAgICAgIHdpZHRoOiAxNDBweDsKICAgICAgICBjb2xvcjogJG1lZ2FtZW51QnV0dG9uVGV4dENvbG9yOwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICBsaW5lLWhlaWdodDogNjBweDsKICAgICAgICBsZXR0ZXItc3BhY2luZzogMnB4OwogICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsKICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKGJhY2tncm91bmQtY29sb3IgJHRyYW5zaXRpb25EdXJhdGlvbik7CiAgICAgICAgJjpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0b3BiYXJJY29uSG92ZXJCZ0NvbG9yOwogICAgICAgIH0KICAgICAgICBpIHsKICAgICAgICAgICAgd2lkdGg6IDE1cHg7CiAgICAgICAgICAgIGhlaWdodDogMTVweDsKICAgICAgICAgICAgZm9udC1zaXplOiAxZW07CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAycHg7CiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgfQogICAgfQogICAgLmxheW91dC1tZWdhbWVudSB7CiAgICAgICAgei1pbmRleDogOTk4OwogICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgICAgICBsZWZ0OiAyOTBweDsKICAgICAgICB0b3A6IDYwcHg7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lZ2FtZW51QmdDb2xvcjsKICAgICAgICBtYXgtd2lkdGg6IDcwMHB4OwogICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAkbWVnYW1lbnVCb3JkZXJDb2xvcjsKICAgICAgICBwYWRkaW5nOiAxNnB4OwogICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4OwogICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKICAgICAgICBsZXR0ZXItc3BhY2luZzogMDsKICAgICAgICBmb250LXdlaWdodDogbm9ybWFsOwoKICAgICAgICAubGF5b3V0LW1lZ2FtZW51LXN1Ym1lbnUgewogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICAgICAuY29udGVudC1pbWcgewogICAgICAgICAgICAgICAgcGFkZGluZzogMTZweDsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgICAgICAgICBpbWcgewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMzVweDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC5pbWctaGVhZGVyIHsKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgICAgICAgICAgdG9wOiAyMHB4OwogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZGFya01lZ2FtZW51VGV4dENvbG9yOwogICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4OwogICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNHB4OwogICAgICAgICAgICAgICAgICAgIHRleHQtc2hhZG93OiAwcHggMHB4IDJweCAkZGFya01lZ2FtZW51SGVhZGVyU2hhZG93Q29sb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAuaW1nLXN1YmhlYWRlciB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE0cHg7CiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICAgICAgICAgIHRvcDogNDBweDsKICAgICAgICAgICAgICAgICAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAycHggJGRhcmtNZWdhbWVudUhlYWRlclNoYWRvd0NvbG9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLnAtYnV0dG9uIHsKICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICAgICAgICAgICAgICAgICAgICAucC1idXR0b24tdGV4dCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAxNnB4OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBoNiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJG1lZ2FtZW51SGVhZGVyQ29sb3I7CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7CiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICAgICAgICAgICAgbWFyZ2luOiAyMHB4IDAgMCAxNHB4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVsIHsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgICAgICAgICAgICAgICBsaSB7CiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM1cHg7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB0cmFuc3BhcmVudDsKICAgICAgICAgICAgICAgICAgICBpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRtZWdhbWVudUljb25Db2xvcjsKICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OwogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTJweDsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHNwYW4gewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJG1lZ2FtZW51VGV4dENvbG9yOwogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICY6aG92ZXIgewogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWVnYW1lbnVIb3ZlckJnQ29sb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICY6YWN0aXZlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAkbWVnYW1lbnVBY3RpdmVUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVnYW1lbnVBY3RpdmVUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRtZWdhbWVudUFjdGl2ZVRleHRDb2xvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkbWVnYW1lbnVBY3RpdmVUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJi5sYXlvdXQtbWVnYW1lbnUtZGFyayB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRkYXJrTWVnYW1lbnVCZ0NvbG9yOwogICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgIGg2IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAkZGFya01lZ2FtZW51VGV4dENvbG9yOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVsIHsKICAgICAgICAgICAgICAgIGxpIHsKICAgICAgICAgICAgICAgICAgICBpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRkYXJrTWVnYW1lbnVJY29uQ29sb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHNwYW4gewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGRhcmtNZWdhbWVudVRleHRDb2xvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRkYXJrTWVnYW1lbnVIb3ZlckJnQ29sb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICY6YWN0aXZlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAkZGFya01lZ2FtZW51SG92ZXJUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZGFya01lZ2FtZW51SG92ZXJUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRkYXJrTWVnYW1lbnVIb3ZlclRleHRDb2xvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZGFya01lZ2FtZW51SG92ZXJUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJi5sYXlvdXQtbWVnYW1lbnUtZ3JhZGllbnQgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAkZ3JhZGllbnRNZWdhbWVudUJvdHRvbUJnQ29sb3IsICRncmFkaWVudE1lZ2FtZW51VG9wQmdDb2xvcik7CiAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICB9CiAgICAgICAgJi5sYXlvdXQtbWVnYW1lbnUtYWN0aXZlIHsKICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgfQogICAgfQp9CgpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbW9iaWxlQnJlYWtQb2ludCkgewogICAgLmxheW91dC13cmFwcGVyIHsKICAgICAgICAjbGF5b3V0LW1lZ2FtZW51LWJ1dHRvbiB7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDYwcHg7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGhlaWdodDogNDVweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDQ1cHg7CiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAycHg7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtZWdhbWVudU1vYmlsZUJnQ29sb3I7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICAgICAgICAgICY6aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lZ2FtZW51TW9iaWxlSG92ZXJCZ0NvbG9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC5sYXlvdXQtbWVnYW1lbnUgewogICAgICAgICAgICB0b3A6IDEwNXB4OwogICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEwNXB4KTsKICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgfQogICAgfQogICAgYm9keS5ib2R5LW1lZ2FtZW51LWFjdGl2ZSB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIH0KfQo