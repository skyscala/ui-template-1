LnVzZXJtZW51IHsKICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgICBwYWRkaW5nOiAwOwogICAgbWFyZ2luOiAwOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKCiAgICAmLnVzZXJtZW51LW92ZXJsYXkgewogICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgICAgICBiYWNrZ3JvdW5kOiAkdG9wYmFyUmlnaHRCZ0NvbG9yOwogICAgICAgIHdpZHRoOiAyMDBweDsKICAgICAgICB6LWluZGV4OiA5OTk7CiAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICBAaW5jbHVkZSBzaGFkb3coMCAycHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjUpKTsKCiAgICAgICAgbGkgewogICAgICAgICAgICBhIHsKICAgICAgICAgICAgICAgICY6aG92ZXIgewogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0b3BiYXJJY29uSG92ZXJCZ0NvbG9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgICYudXNlcm1lbnUtYWN0aXZlIHsKICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICB0b3A6IDYwcHg7CiAgICAgICAgcmlnaHQ6IDBweDsKICAgICAgICBsZWZ0OiBhdXRvOwogICAgfQoKICAgIGxpIHsKICAgICAgICBhIHsKICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgICAgIHBhZGRpbmc6IDZweCAxMnB4OwogICAgICAgICAgICBjb2xvcjogJHRvcGJhclRleHRDb2xvcjsKICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKCiAgICAgICAgICAgIGkgewogICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA5cHg7CiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwoKICAgICAgICAgICAgICAgICYubGF5b3V0LW1lbnVpdGVtLXRvZ2dsZXIgewogICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zaXRpb24odHJhbnNmb3JtICR0cmFuc2l0aW9uRHVyYXRpb24pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBzcGFuLCBpbWcgewogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJjpob3ZlciB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2lkZWJhck1lbnVpdGVtSG92ZXJCZ0NvbG9yOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB1bCB7CiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDA7CiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgcGFkZGluZzogMDsKCiAgICAgICAgICAgIGEgewogICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyNHB4OwoKICAgICAgICAgICAgICAgIHNwYW4sIGltZyB7CiAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpbWcgewogICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogOHB4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgID4gbGkgewogICAgICAgICYubWVudWl0ZW0tYWN0aXZlIHsKICAgICAgICAgICAgPiBhIHsKICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4OwogICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAkc2lkZWJhck1lbnVpdGVtQWN0aXZlQm9yZGVyTGVmdENvbG9yOwogICAgICAgICAgICAgICAgY29sb3I6ICRzaWRlYmFyTWVudWl0ZW1BY3RpdmVUZXh0Q29sb3I7CgogICAgICAgICAgICAgICAgaSB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRzaWRlYmFyTWVudWl0ZW1BY3RpdmVUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3BhbiB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRzaWRlYmFyTWVudWl0ZW1BY3RpdmVUZXh0Q29sb3I7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaS5sYXlvdXQtbWVudWl0ZW0tdG9nZ2xlciB7CiAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgcm90YXRlKC0xODBkZWcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgID4gdWwgewogICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMTAwMHB4OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg