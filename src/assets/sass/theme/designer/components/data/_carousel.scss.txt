LnAtY2Fyb3VzZWwgewogICAgLnAtY2Fyb3VzZWwtY29udGVudCB7CiAgICAgICAgLnAtY2Fyb3VzZWwtcHJldiwKICAgICAgICAucC1jYXJvdXNlbC1uZXh0IHsKICAgICAgICAgICAgQGluY2x1ZGUgYWN0aW9uLWljb24oKTsKICAgICAgICAgICAgbWFyZ2luOiAkaW5saW5lU3BhY2luZzsKICAgICAgICB9CiAgICB9CgogICAgLnAtY2Fyb3VzZWwtaW5kaWNhdG9ycyB7CiAgICAgICAgcGFkZGluZzogJGNhcm91c2VsSW5kaWNhdG9yc1BhZGRpbmc7CgogICAgICAgIC5wLWNhcm91c2VsLWluZGljYXRvciB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogJGlubGluZVNwYWNpbmc7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRpbmxpbmVTcGFjaW5nOwogICAgICAgICAgIAogICAgICAgICAgICBidXR0b24gewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNhcm91c2VsSW5kaWNhdG9yQmc7CiAgICAgICAgICAgICAgICB3aWR0aDogJGNhcm91c2VsSW5kaWNhdG9yV2lkdGg7CiAgICAgICAgICAgICAgICBoZWlnaHQ6ICRjYXJvdXNlbEluZGljYXRvckhlaWdodDsKICAgICAgICAgICAgICAgIHRyYW5zaXRpb246ICRhY3Rpb25JY29uVHJhbnNpdGlvbjsKICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRjYXJvdXNlbEluZGljYXRvckJvcmRlclJhZGl1czsKCiAgICAgICAgICAgICAgICAmOmhvdmVyIHsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkY2Fyb3VzZWxJbmRpY2F0b3JIb3ZlckJnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAmLnAtaGlnaGxpZ2h0IHsKICAgICAgICAgICAgICAgIGJ1dHRvbiB7CiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGhpZ2hsaWdodEJnOwogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkaGlnaGxpZ2h0VGV4dENvbG9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg