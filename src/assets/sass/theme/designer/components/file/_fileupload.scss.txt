LnAtZmlsZXVwbG9hZCB7CiAgICAucC1maWxldXBsb2FkLWJ1dHRvbmJhciB7CiAgICAgICAgYmFja2dyb3VuZDogJHBhbmVsSGVhZGVyQmc7CiAgICAgICAgcGFkZGluZzogJHBhbmVsSGVhZGVyUGFkZGluZzsKICAgICAgICBib3JkZXI6ICRwYW5lbEhlYWRlckJvcmRlcjsKICAgICAgICBjb2xvcjogJHBhbmVsSGVhZGVyVGV4dENvbG9yOwogICAgICAgIGJvcmRlci1ib3R0b206IDAgbm9uZTsKICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJGJvcmRlclJhZGl1czsKICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAkYm9yZGVyUmFkaXVzOwoKICAgICAgICAucC1idXR0b24gewogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICRpbmxpbmVTcGFjaW5nOwoKICAgICAgICAgICAgJi5wLWZpbGV1cGxvYWQtY2hvb3NlLnAtZm9jdXMgewogICAgICAgICAgICAgICAgQGluY2x1ZGUgZm9jdXNlZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC5wLWZpbGV1cGxvYWQtY29udGVudCB7CiAgICAgICAgYmFja2dyb3VuZDogJHBhbmVsQ29udGVudEJnOwogICAgICAgIHBhZGRpbmc6ICRmaWxlVXBsb2FkQ29udGVudFBhZGRpbmc7CiAgICAgICAgYm9yZGVyOiAkcGFuZWxDb250ZW50Qm9yZGVyOwogICAgICAgIGNvbG9yOiAkcGFuZWxDb250ZW50VGV4dENvbG9yOwogICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkYm9yZGVyUmFkaXVzOwogICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRib3JkZXJSYWRpdXM7CiAgICB9CgogICAgLnAtcHJvZ3Jlc3NiYXIgewogICAgICAgIGhlaWdodDogJGZpbGVVcGxvYWRQcm9ncmVzc0JhckhlaWdodDsKICAgIH0KCiAgICAucC1maWxldXBsb2FkLXJvdyB7CiAgICAgICAgPiBkaXYgewogICAgICAgICAgICBwYWRkaW5nOiAkdGFibGVCb2R5Q2VsbFBhZGRpbmc7CiAgICAgICAgfQogICAgfQoKICAgICYucC1maWxldXBsb2FkLWFkdmFuY2VkIHsKICAgICAgICAucC1tZXNzYWdlIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMDsKICAgICAgICB9CiAgICB9Cn0KCi5wLWZpbGV1cGxvYWQtY2hvb3NlIHsKICAgICY6bm90KC5wLWRpc2FibGVkKTpob3ZlciB7CiAgICAgICAgYmFja2dyb3VuZDogJGJ1dHRvbkhvdmVyQmc7CiAgICAgICAgY29sb3I6ICRidXR0b25UZXh0SG92ZXJDb2xvcjsKICAgICAgICBib3JkZXItY29sb3I6ICRidXR0b25Ib3ZlckJvcmRlckNvbG9yOwogICAgfQoKICAgICY6bm90KC5wLWRpc2FibGVkKTphY3RpdmUgewogICAgICAgIGJhY2tncm91bmQ6ICRidXR0b25BY3RpdmVCZzsKICAgICAgICBjb2xvcjogJGJ1dHRvblRleHRBY3RpdmVDb2xvcjsKICAgICAgICBib3JkZXItY29sb3I6ICRidXR0b25BY3RpdmVCb3JkZXJDb2xvcjsKICAgIH0KfQo