LnAtY2FzY2FkZXNlbGVjdCB7CiAgICBiYWNrZ3JvdW5kOiAkaW5wdXRCZzsKICAgIGJvcmRlcjogJGlucHV0Qm9yZGVyOwogICAgdHJhbnNpdGlvbjogJGZvcm1FbGVtZW50VHJhbnNpdGlvbjsKICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXJSYWRpdXM7CgogICAgJjpub3QoLnAtZGlzYWJsZWQpOmhvdmVyIHsKICAgICAgICBib3JkZXItY29sb3I6ICRpbnB1dEhvdmVyQm9yZGVyQ29sb3I7CiAgICB9CgogICAgJjpub3QoLnAtZGlzYWJsZWQpLnAtZm9jdXMgewogICAgICAgIEBpbmNsdWRlIGZvY3VzZWQtaW5wdXQoKTsKICAgIH0KCiAgICAucC1jYXNjYWRlc2VsZWN0LWxhYmVsIHsKICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgICAgICBib3JkZXI6IDAgbm9uZTsKICAgICAgICBwYWRkaW5nOiAkaW5wdXRQYWRkaW5nOwoKICAgICAgICAmLnAtcGxhY2Vob2xkZXIgewogICAgICAgICAgICBjb2xvcjogJGlucHV0UGxhY2Vob2xkZXJUZXh0Q29sb3I7CiAgICAgICAgfQoKICAgICAgICAmOmVuYWJsZWQ6Zm9jdXMgewogICAgICAgICAgICBvdXRsaW5lOiAwIG5vbmU7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7CiAgICAgICAgfQogICAgfQoKICAgIC5wLWNhc2NhZGVzZWxlY3QtdHJpZ2dlciB7CiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgY29sb3I6ICRpbnB1dEljb25Db2xvcjsKICAgICAgICB3aWR0aDogJGlucHV0R3JvdXBBZGRPbk1pbldpZHRoOwogICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAkYm9yZGVyUmFkaXVzOwogICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkYm9yZGVyUmFkaXVzOwogICAgfQp9CgoucC1jYXNjYWRlc2VsZWN0LXBhbmVsIHsKICAgIGJhY2tncm91bmQ6ICRpbnB1dE92ZXJsYXlCZzsKICAgIGNvbG9yOiAkaW5wdXRMaXN0VGV4dENvbG9yOwogICAgYm9yZGVyOiAkaW5wdXRPdmVybGF5Qm9yZGVyOwogICAgYm9yZGVyLXJhZGl1czogJGJvcmRlclJhZGl1czsKICAgIGJveC1zaGFkb3c6ICRpbnB1dE92ZXJsYXlTaGFkb3c7CgogICAgLnAtY2FzY2FkZXNlbGVjdC1pdGVtcyB7CiAgICAgICAgcGFkZGluZzogJGlucHV0TGlzdFBhZGRpbmc7CgogICAgICAgIC5wLWNhc2NhZGVzZWxlY3QtaXRlbSB7CiAgICAgICAgICAgIG1hcmdpbjogJGlucHV0TGlzdEl0ZW1NYXJnaW47CiAgICAgICAgICAgIGJvcmRlcjogJGlucHV0TGlzdEl0ZW1Cb3JkZXI7CiAgICAgICAgICAgIGNvbG9yOiAkaW5wdXRMaXN0SXRlbVRleHRDb2xvcjsKICAgICAgICAgICAgYmFja2dyb3VuZDogJGlucHV0TGlzdEl0ZW1CZzsKICAgICAgICAgICAgdHJhbnNpdGlvbjogJGxpc3RJdGVtVHJhbnNpdGlvbjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGlucHV0TGlzdEl0ZW1Cb3JkZXJSYWRpdXM7CgogICAgICAgICAgICAucC1jYXNjYWRlc2VsZWN0LWl0ZW0tY29udGVudCB7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAkaW5wdXRMaXN0SXRlbVBhZGRpbmc7CgogICAgICAgICAgICAgICAgJjpmb2N1cyB7CiAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgZm9jdXNlZC1saXN0aXRlbSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAmLnAtaGlnaGxpZ2h0IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAkaGlnaGxpZ2h0VGV4dENvbG9yOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGhpZ2hsaWdodEJnOwogICAgICAgICAgICB9CgogICAgICAgICAgICAmOm5vdCgucC1oaWdobGlnaHQpOm5vdCgucC1kaXNhYmxlZCk6aG92ZXIgewogICAgICAgICAgICAgICAgY29sb3I6ICRpbnB1dExpc3RJdGVtVGV4dEhvdmVyQ29sb3I7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkaW5wdXRMaXN0SXRlbUhvdmVyQmc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5wLWNhc2NhZGVzZWxlY3QtZ3JvdXAtaWNvbiB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6ICRtZW51aXRlbVN1Ym1lbnVJY29uRm9udFNpemU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCnAtY2FzY2FkZXNlbGVjdC5uZy1kaXJ0eS5uZy1pbnZhbGlkID4gLnAtY2FzY2FkZXNlbGVjdCB7CiAgICBAaW5jbHVkZSBpbnZhbGlkLWlucHV0KCk7Cn0KCi5wLWlucHV0LWZpbGxlZCB7CiAgICAucC1jYXNjYWRlc2VsZWN0IHsKICAgICAgICBiYWNrZ3JvdW5kOiAkaW5wdXRGaWxsZWRCZzsKCiAgICAgICAgJjpub3QoLnAtZGlzYWJsZWQpOmhvdmVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0RmlsbGVkSG92ZXJCZzsKICAgICAgICB9CiAgICAKICAgICAgICAmOm5vdCgucC1kaXNhYmxlZCkucC1mb2N1cyB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRpbnB1dEZpbGxlZEZvY3VzQmc7CiAgICAgICAgfQogICAgfQp9Cg