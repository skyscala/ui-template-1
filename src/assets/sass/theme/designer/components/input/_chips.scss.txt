QHVzZSAnc2FzczptYXRoJzsKCi5wLWNoaXBzIHsKICAgIC5wLWNoaXBzLW11bHRpcGxlLWNvbnRhaW5lciB7CiAgICAgICAgcGFkZGluZzogbWF0aC5kaXYobnRoKCRpbnB1dFBhZGRpbmcsIDEpLCAyKSBudGgoJGlucHV0UGFkZGluZywgMik7CgogICAgICAgICY6bm90KC5wLWRpc2FibGVkKTpob3ZlciB7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGlucHV0SG92ZXJCb3JkZXJDb2xvcjsKICAgICAgICB9CgogICAgICAgICY6bm90KC5wLWRpc2FibGVkKS5wLWZvY3VzIHsKICAgICAgICAgICAgQGluY2x1ZGUgZm9jdXNlZC1pbnB1dCgpOwogICAgICAgIH0KCiAgICAgICAgLnAtY2hpcHMtdG9rZW4gewogICAgICAgICAgICBwYWRkaW5nOiBtYXRoLmRpdihudGgoJGlucHV0UGFkZGluZywgMSksIDIpIG50aCgkaW5wdXRQYWRkaW5nLCAyKTsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAkaW5saW5lU3BhY2luZzsKICAgICAgICAgICAgYmFja2dyb3VuZDogJGhpZ2hsaWdodEJnOwogICAgICAgICAgICBjb2xvcjogJGhpZ2hsaWdodFRleHRDb2xvcjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGJvcmRlclJhZGl1czsKCiAgICAgICAgICAgIC5wLWNoaXBzLXRva2VuLWljb24gewogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6ICRpbmxpbmVTcGFjaW5nOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAucC1jaGlwcy1pbnB1dC10b2tlbiB7CiAgICAgICAgICAgIHBhZGRpbmc6IG1hdGguZGl2KG50aCgkaW5wdXRQYWRkaW5nLCAxKSwgMikgMDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpbnB1dCB7CiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJGZvbnRGYW1pbHk7CiAgICAgICAgICAgICAgICBmb250LXNpemU6ICRmb250U2l6ZTsKICAgICAgICAgICAgICAgIGNvbG9yOiAkdGV4dENvbG9yOwogICAgICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKcC1jaGlwcy5uZy1kaXJ0eS5uZy1pbnZhbGlkID4gLnAtY2hpcHMgPiAucC1pbnB1dHRleHQgewogICAgQGluY2x1ZGUgaW52YWxpZC1pbnB1dCgpOwp9Cg