QHVzZSAnc2FzczptYXRoJzsKCi5wLWlucHV0c3dpdGNoIHsKICAgIHdpZHRoOiAkaW5wdXRTd2l0Y2hXaWR0aDsKICAgIGhlaWdodDogJGlucHV0U3dpdGNoSGVpZ2h0OwoKICAgIC5wLWlucHV0c3dpdGNoLXNsaWRlciB7CiAgICAgICAgYmFja2dyb3VuZDogJGlucHV0U3dpdGNoU2xpZGVyT2ZmQmc7CiAgICAgICAgdHJhbnNpdGlvbjogJGZvcm1FbGVtZW50VHJhbnNpdGlvbjsKICAgICAgICBib3JkZXItcmFkaXVzOiAkaW5wdXRTd2l0Y2hCb3JkZXJSYWRpdXM7CgogICAgICAgICY6YmVmb3JlIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogJGlucHV0U3dpdGNoSGFuZGxlT2ZmQmc7CiAgICAgICAgICAgIHdpZHRoOiAkaW5wdXRTd2l0Y2hIYW5kbGVXaWR0aDsKICAgICAgICAgICAgaGVpZ2h0OiAkaW5wdXRTd2l0Y2hIYW5kbGVIZWlnaHQ7CiAgICAgICAgICAgIGxlZnQ6ICRpbnB1dFN3aXRjaFNsaWRlclBhZGRpbmc7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IG1hdGguZGl2KC0xICogJGlucHV0U3dpdGNoSGFuZGxlSGVpZ2h0LCAyKTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGlucHV0U3dpdGNoSGFuZGxlQm9yZGVyUmFkaXVzOwogICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAkdHJhbnNpdGlvbkR1cmF0aW9uOwogICAgICAgIH0KICAgIH0KCiAgICAmLnAtaW5wdXRzd2l0Y2gtY2hlY2tlZCB7CiAgICAgICAgLnAtaW5wdXRzd2l0Y2gtc2xpZGVyOmJlZm9yZSB7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgkaW5wdXRTd2l0Y2hIYW5kbGVXaWR0aCk7CiAgICAgICAgfQogICAgfQoKICAgICYucC1mb2N1cyB7CiAgICAgICAgLnAtaW5wdXRzd2l0Y2gtc2xpZGVyIHsKICAgICAgICAgICAgQGluY2x1ZGUgZm9jdXNlZCgpOwogICAgICAgIH0KICAgIH0KCiAgICAmOm5vdCgucC1kaXNhYmxlZCk6aG92ZXIgewogICAgICAgIC5wLWlucHV0c3dpdGNoLXNsaWRlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICRpbnB1dFN3aXRjaFNsaWRlck9mZkhvdmVyQmc7CiAgICAgICAgfQogICAgfQoKICAgICYucC1pbnB1dHN3aXRjaC1jaGVja2VkIHsKICAgICAgICAucC1pbnB1dHN3aXRjaC1zbGlkZXIgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAkaW5wdXRTd2l0Y2hTbGlkZXJPbkJnOwoKICAgICAgICAgICAgJjpiZWZvcmUgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGlucHV0U3dpdGNoSGFuZGxlT25CZzsKICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICY6bm90KC5wLWRpc2FibGVkKTpob3ZlciB7CiAgICAgICAgICAgIC5wLWlucHV0c3dpdGNoLXNsaWRlciB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkaW5wdXRTd2l0Y2hTbGlkZXJPbkhvdmVyQmc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCnAtaW5wdXRzd2l0Y2gubmctZGlydHkubmctaW52YWxpZCA-IC5wLWlucHV0c3dpdGNoIHsKICAgIEBpbmNsdWRlIGludmFsaWQtaW5wdXQoKTsKfQ