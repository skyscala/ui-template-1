LnAtYnJlYWRjcnVtYiB7CiAgICBiYWNrZ3JvdW5kOiAkYnJlYWRjcnVtYkJnOwogICAgYm9yZGVyOiAkYnJlYWRjcnVtYkJvcmRlcjsKICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXJSYWRpdXM7CiAgICBwYWRkaW5nOiAkYnJlYWRjcnVtYlBhZGRpbmc7CgogICAgdWwgewogICAgICAgIGxpIHsKICAgICAgICAgICAgLnAtbWVudWl0ZW0tbGluayB7CiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAkbGlzdEl0ZW1UcmFuc2l0aW9uOwogICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGJvcmRlclJhZGl1czsKCiAgICAgICAgICAgICAgICAmOmZvY3VzIHsKICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSBmb2N1c2VkKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLnAtbWVudWl0ZW0tdGV4dCB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRicmVhZGNydW1iSXRlbVRleHRDb2xvcjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAucC1tZW51aXRlbS1pY29uIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJyZWFkY3J1bWJJdGVtSWNvbkNvbG9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAmLnAtYnJlYWRjcnVtYi1jaGV2cm9uIHsKICAgICAgICAgICAgICAgIG1hcmdpbjogMCAkaW5saW5lU3BhY2luZyAwICRpbmxpbmVTcGFjaW5nOwogICAgICAgICAgICAgICAgY29sb3I6ICRicmVhZGNydW1iU2VwYXJhdG9yQ29sb3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7CiAgICAgICAgICAgICAgICAucC1tZW51aXRlbS10ZXh0IHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJyZWFkY3J1bWJMYXN0SXRlbVRleHRDb2xvcjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAucC1tZW51aXRlbS1pY29uIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJyZWFkY3J1bWJMYXN0SXRlbUljb25Db2xvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo