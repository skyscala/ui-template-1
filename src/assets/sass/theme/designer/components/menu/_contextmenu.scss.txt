LnAtY29udGV4dG1lbnUgewogICAgcGFkZGluZzogJHZlcnRpY2FsTWVudVBhZGRpbmc7CiAgICBiYWNrZ3JvdW5kOiAkb3ZlcmxheU1lbnVCZzsKICAgIGNvbG9yOiAkbWVudVRleHRDb2xvcjsKICAgIGJvcmRlcjogJG92ZXJsYXlNZW51Qm9yZGVyOwogICAgYm94LXNoYWRvdzogJG92ZXJsYXlNZW51U2hhZG93OwogICAgYm9yZGVyLXJhZGl1czogJGJvcmRlclJhZGl1czsKICAgIHdpZHRoOiAkbWVudVdpZHRoOwoKICAgIC5wLW1lbnVpdGVtLWxpbmsgewogICAgICAgIEBpbmNsdWRlIG1lbnVpdGVtLWxpbmsoKTsKICAgIH0KCiAgICAucC1zdWJtZW51LWxpc3QgewogICAgICAgIHBhZGRpbmc6ICR2ZXJ0aWNhbE1lbnVQYWRkaW5nOwogICAgICAgIGJhY2tncm91bmQ6ICRvdmVybGF5TWVudUJnOwogICAgICAgIGJvcmRlcjogJG92ZXJsYXlNZW51Qm9yZGVyOwogICAgICAgIGJveC1zaGFkb3c6ICRvdmVybGF5TWVudVNoYWRvdzsKICAgICAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyUmFkaXVzOwogICAgfQoKICAgIC5wLW1lbnVpdGVtIHsKICAgICAgICBtYXJnaW46ICR2ZXJ0aWNhbE1lbnVpdGVtTWFyZ2luOwogICAgCiAgICAgICAgJjpsYXN0LWNoaWxkIHsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIH0KCiAgICAgICAgJi5wLW1lbnVpdGVtLWFjdGl2ZSB7CiAgICAgICAgICAgID4gLnAtbWVudWl0ZW0tbGluayB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkbWVudWl0ZW1BY3RpdmVCZzsKCiAgICAgICAgICAgICAgICAucC1tZW51aXRlbS10ZXh0IHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJG1lbnVpdGVtVGV4dEFjdGl2ZUNvbG9yOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC5wLW1lbnVpdGVtLWljb24sIC5wLXN1Ym1lbnUtaWNvbiB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRtZW51aXRlbUljb25BY3RpdmVDb2xvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAucC1tZW51LXNlcGFyYXRvciB7CiAgICAgICAgYm9yZGVyLXRvcDogJGRpdmlkZXI7CiAgICAgICAgbWFyZ2luOiAkbWVudVNlcGFyYXRvck1hcmdpbjsKICAgIH0KCiAgICAucC1zdWJtZW51LWljb24gewogICAgICAgIGZvbnQtc2l6ZTogJG1lbnVpdGVtU3VibWVudUljb25Gb250U2l6ZTsKICAgIH0KfQo