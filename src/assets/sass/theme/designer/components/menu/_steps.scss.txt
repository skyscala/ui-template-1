QHVzZSAnc2FzczptYXRoJzsKCi5wLXN0ZXBzIHsKICAgIC5wLXN0ZXBzLWl0ZW0gewogICAgICAgIC5wLW1lbnVpdGVtLWxpbmsgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgICAgICAgICAgdHJhbnNpdGlvbjogJGxpc3RJdGVtVHJhbnNpdGlvbjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGJvcmRlclJhZGl1czsKICAgICAgICAgICAgYmFja2dyb3VuZDogJHN0ZXBzSXRlbUJnOwoKICAgICAgICAgICAgLnAtc3RlcHMtbnVtYmVyIHsKICAgICAgICAgICAgICAgIGNvbG9yOiAkc3RlcHNJdGVtTnVtYmVyQ29sb3I7CiAgICAgICAgICAgICAgICBib3JkZXI6ICRzdGVwc0l0ZW1Cb3JkZXI7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkc3RlcHNJdGVtQmc7CiAgICAgICAgICAgICAgICBtaW4td2lkdGg6ICRzdGVwc0l0ZW1OdW1iZXJXaWR0aDsKICAgICAgICAgICAgICAgIGhlaWdodDogJHN0ZXBzSXRlbU51bWJlckhlaWdodDsKICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAkc3RlcHNJdGVtTnVtYmVySGVpZ2h0OwogICAgICAgICAgICAgICAgZm9udC1zaXplOiAkc3RlcHNJdGVtTnVtYmVyRm9udFNpemU7CiAgICAgICAgICAgICAgICB6LWluZGV4OiAxOwogICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHN0ZXBzSXRlbU51bWJlckJvcmRlclJhZGl1czsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnAtc3RlcHMtdGl0bGUgewogICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogJGlubGluZVNwYWNpbmc7CiAgICAgICAgICAgICAgICBjb2xvcjogJHN0ZXBzSXRlbVRleHRDb2xvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJjpub3QoLnAtZGlzYWJsZWQpOmZvY3VzIHsKICAgICAgICAgICAgICAgIEBpbmNsdWRlIGZvY3VzZWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJi5wLWhpZ2hsaWdodCB7CiAgICAgICAgICAgIC5wLXN0ZXBzLW51bWJlciB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkaGlnaGxpZ2h0Qmc7CiAgICAgICAgICAgICAgICBjb2xvcjogJGhpZ2hsaWdodFRleHRDb2xvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnAtc3RlcHMtdGl0bGUgewogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6ICRzdGVwc0l0ZW1BY3RpdmVGb250V2VpZ2h0OwogICAgICAgICAgICAgICAgY29sb3I6ICR0ZXh0Q29sb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICY6YmVmb3JlIHsKICAgICAgICAgICAgY29udGVudDonICc7CiAgICAgICAgICAgIGJvcmRlci10b3A6ICRkaXZpZGVyOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgdG9wOiA1MCU7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IG1hdGguZGl2KC0xICogJHN0ZXBzSXRlbU51bWJlckhlaWdodCwgMik7CiAgICAgICAgfQogICAgfQp9Cg